0707수업 02

<< Wrapper 클래스 >>
==> 기본자료형을 객체로 포장하기 위한 클래스들을 말한다. 
boolean	==> Boolean 
char		==> Character 
byte		==> Byte
short	==> Short
int		==> Integer
long		==> Long
float		==> Float
double	==> Double 

자바가 제공하는 메소드 중에는 기본자료형을 매개변수로 상대하지 않고 객체를 상대하는 메소드들이 많다.
그래서 기본자료형을 객체로 만들필요가 있음. 이때  Wrapper 클래스를 사용하여 기본자료형을 객체로 만들 수 있다.  
public void pro (Object obj) {
}

int age = 20;
pro(new Interger (age)); // 객체로 변환했어야 했다
pro(age); ==>auto Boxing 최근 자바는 자동으로 객체로 표현해줌 


원래는 기본자료형을 객체로 포장하기위한 용도였으나 현재는 자동포장되기 때문에 
크게 신경 안써도 됨. 다만 서로 다른 자료형으로 변환하기 위한 용도로 Wrapper 클래스를 이용함.

<< 예외처리 >>
예기치 않는 상황에 의한 처리를 말한다. 
자바에서는 대부분 예외에 대해서는 이미 클래스로 만들어져 있다. 
예를들어 배열의 인덱스를 넘음 -ArrayIndexOutOfBoundException
숫자 형식에 맞지않으면 NumberFormatException
0으로 나누려 하면 ArismethicException
등등
<<예외 처리하는 방법>>
예외가 발생할만할 문장들을 try{ } 안에 기술하고 
예외처리를 위한 문장을 catch 절에 기술한다. 

try  {
   예외가 발생할만한 명령어들
}catch(예외자료형1 변수명1 ) {
   예외자료형 1이  발생했을때 처리할 명령어들	
}catch(예외자료형2 변수명2) {
  예외자료형 2가 발생했을때 처리할 명령어들	
}

==> 하나의 try 안에 여러개의  catch절이 올 수 있다. 
==> 그런데 너무 예외 처리에 치중하다보면 본 기능보다는 예외처리가 더 길어질 수 있다. 
	필요하다면 상세하게 각 예외별 catch절을 만들 수도 있고
	모든 예외를 포함하는 exception을 갖는 catch 하나만으로도 처리할 수 있다. 

==> 하나의 try 안에 여러개의  catch를 표현할 때에는 반드시 범위가 작은 순으로 와야한다.
 

<< throws >>
메소드 안에서 예외가 발생이 될 때 메소드 안에서 직접 예외처리를 하지 않고 메소드 호출하는 쪽으로 예외를 전파하기 위하여
사용하는 키워드. 

public [protected /private/etc... 접근명시자] 메소드이름([매개변수])  throws 예외클래스1, 예외클래스2.... {

}

<<RuntimeException>>
자바의 예외중에 RuntimeException 의 후손들은 개발자가 따로 예외처리 하지 않아도 자바가 예외처리를 해준다.
그러나 RuntimeException이 아닌 예외들은 반드시 사용자가 예외처리를 해야한다. 


<<사용자 정의 예외>>
