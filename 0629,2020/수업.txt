새로운 자료형(사용자 정의 자료형)
==> 기본자료형만으로는 프로그램하기가 번거로워
사용자가 한번에 처리해야할 데이터를 묶어서 
하나의 셋트를 만들어요.
그렇게 하면 프로그램하기가 훨씬 수월해 집니다.
이와 같이 사용자가 새로운 "자료형"을 만들 수 있어요.
자바에서는 "클래스"를 통해 새로운 "자료형"을 만들어요.

<<클래스>>
:: 새로운 자료형 (사용자 정의 자료형) 

<<java>>
객체지향프로그램:: object oriented programming_OOP
==> 현실세계의 모든것을 객체화 할 수 있다. 

영대가 손에 핸드폰을 들고 이스트백을 메고 은행에 들어간다. 

사람
	손
	든다
	맨다	
	들어간다 

"자바" 로 객체지향 프로그램을 한다는 말은 내가 표현하고자 하는 객체에 대해서 분석을 해야한다는 말..
그 객체는 어떠한 속성들과 어떠한 동작으로 구성이 되는지를 분석. 
그 분석을 바탕으로 "클래스" 를 먼저 만든다. 

클래스 
	속성(들)  ==> 멤버변수
	동작(들) ==> 멤버메소드 
-----------------------------------------------------------------------------------------------------------------------------

사람		 
person	 
		속성	 이름  String name "둘리" 
			 성별	 Char		'M', 'F'
			  나이 int			30					
		동작	 먹는다 public void eat(String food)
			 달린다 public void run()

<<객체지향 프로그래밍의 특징>>
1. 은닉성 (Encaptulation) 
	외부의 다른 클래스로부터 데이터(속성,멤버) 들을 보호하는 데에 목적이 있다. 
	
	접근명시자 
		private :; 전용부 (외부의 다ㄴ 클래스들에게 노출하지 않는 멤버들을 든다. 
				일반적으로 속성(멤버변수) 들을  private로 둔다, 
		
		public :  공용부, 외부의 다른 클래스에게 사용을 허락할 멤버들을 둔다. 

		protected
		기본 (생략, 아무것도 쓰지 않는것) 
2. 상속성
3. 다형성 


<<생성자>>
클래스 이름과 동일한 이름을 갖는 특별한 메소드

<<생성자는 왜 필요한가?>>
객체 생성시에 멤버 변수들을 특별한 값으로 초기화할 목적으로 사용.

<<생성자 만드는 방법>>>
클래스 이름과 같은 이름으로 메소드를 만들며 일반 메소드와 달리 호출문에 의해 동작하는 것이 아니라
객체 생성시에 자동 수행한다. 
따라서 일반메소드처럼 메소드의 반환자료형이 없는 것에 !!주의!!

<< 생성자의 중복 Constructor Overloading>>
필요하다면 생성자를 여러개 중복하여 만들 수(==정의할 수) 있음.
생성자의 //매개변수//의 개수가 다르거나 //자료형//이 달라야함

		